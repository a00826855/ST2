from random import choice
from turtle import *
from freegames import floor, vector

writer = Turtle(visible=False)
# almacena el numero de puntos comidos por pacman
state = {'score': 0}

# esconde la turtle en los objetos
path = Turtle(visible=False)
writer = Turtle(visible=False)

# direccion de pacman
aim = vector(5, 0)

# starting position de pacman
pacman = vector(-40, -80)

# posiciones y direcciones de los fantasmas
ghosts = [
    [vector(-180, 160), vector(5, 0)],
    [vector(-180, -160), vector(0, 5)],
    [vector(100, 160), vector(0, -5)],
    [vector(100, -160), vector(-5, 0)],
    
]

# tablero
tiles = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0,
    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
]
        
# square con su esquina inferior izquierda en (x,y)
def square(x, y):
    "Draw square using path at (x, y)."
    path.up()
    path.goto(x, y)
    path.down()
    path.begin_fill()

    for count in range(4):
        path.forward(20)
        path.left(90)

    path.end_fill()

def offset(point):
    "Return offset of point in tiles."
    x = (floor(point.x, 20) + 200) / 20
    y = (180 - floor(point.y, 20)) / 20
    index = int(x + y * 20)
    return index

# regresa true si es un punto valido
def valid(point):
    "Return True if point is valid in tiles."
    index = offset(point)

    # false = pared
    if tiles[index] == 0:
        return False

    index = offset(point + 19)

    # false = pared
    if tiles[index] == 0:
        return False

    return point.x % 20 == 0 or point.y % 20 == 0

def world():
    "Draw world using path."
    bgcolor('black')
    colours = {'space violet': '#510082'}
    path.color(colours['space violet'])

    # lee lista tiles
    for index in range(len(tiles)):

        # lee el valor index en la lista tiles
        tile = tiles[index]

        # valor = 1
        if tile > 0:
            # calcula la x y donde dibuja el square
            x = (index % 20) * 20 - 200 # Si index es (21 % 20) * 20 - 200 = -180
            y = 180 - (index // 20) * 20 # 180 - (21 // 20) * 20 = 160
            square(x, y)                # dibuja el square(-180,160)

            # dibuja el punto sobre el square
            if tile == 1:
                path.up()
                path.goto(x + 10, y + 10)
                path.dot(4, 'white')


def move():
    colores = ['red', 'green', 'orange', 'blue']
    "Move pacman and all ghosts."
    writer.undo()
    #writer.write(state['score'])

    valor = state['score']
    writer.write(f'Score: {valor}')

    # limpia la ventana
    clear()

    # si no es pared pacman se puede mover en esa direccion
    if valid(pacman + aim):
        pacman.move(aim)

    # regresa la posición del pacman en el tablero
    index = offset(pacman)

    # 1 - camino
    if tiles[index] == 1:
        # A esa posición se le asigna un 2, para saber que el pacman ya comio su punto
        tiles[index] = 2
        # se incrementa el score
        state['score'] += 1
        # Calcula la posición x,y de pacman
        x = (index % 20) * 20 - 200
        y = 180 - (index // 20) * 20
        # vuelve a dibujar el square sin el punto
        square(x, y)

    up()
    # va la posición del pacman
    goto(pacman.x + 10, pacman.y + 10)
    # dibuja el pacman
    dot(20, 'yellow')

    k = 0
    # [vector(-180,160), vector(5,0)]
    for point, course in ghosts:
        # Valida si el fantasma point se puede mover en course
        if valid(point + course):
            point.move(course)
        #Si no se puede mover el fantasma en esa dirección 
        else: 
            #Se actualiza la dirección del movimiento
            options = [
                vector(5, 0),
                vector(-5, 0),
                vector(0, 5),
                vector(0, -5),
            ]            
            plan = choice(options)
            course.x = plan.x
            course.y = plan.y
   
        up()
        goto(point.x + 10, point.y + 10)
        # dibuja el fantasma de los colores de la lista colores
        dot(20, colores[k])
        k = k + 1

    update()

    # Recorre la lista de fantasmas para ver si coinciden las posiciones del pacman y algun fantasma
    for point, course in ghosts:
        if abs(pacman - point) < 20:
            writer.goto(-120,-20)
            writer.write('GAME OVER', font = ('Arial',15,'normal'))
            return

    # velocidad de pacman, entre mas alto mas lento
    ontimer(move, 3)

def change(x, y):
    "Change pacman aim if valid."
    if valid(pacman + vector(x, y)):
        aim.x = x
        aim.y = y

# setup inicializa y determina el tamaño de la ventana, alto=420, ancho=420, 
# posición en la que se inicia a dibujar, esquina inferior izquierda 370,0
setup(420, 420, 370, 0)

# esconde el turtle
hideturtle()
tracer(False)

# nombre y matricuka
writer.up()
writer.goto(-160,-190)
writer.color('white')
writer.write('Alexandra Beatie Hurtado A00826855', align='left', font=('Arial', 8, 'normal'))

# Mueve la turtle writer a la posición (160,160)
writer.goto(107, 190)
writer.color('white')
writer.write(state['score'])


# lee los inputs del teclado
listen()
onkey(lambda: change(5, 0), 'Right')
onkey(lambda: change(-5, 0), 'Left')
onkey(lambda: change(0, 5), 'Up')
onkey(lambda: change(0, -5), 'Down')
world()
move()
done()
